<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dvlprkoji.github.io/</id><title>Koji's Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-07-27T21:14:51+09:00</updated> <author> <name>koji</name> <uri>https://dvlprkoji.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dvlprkoji.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dvlprkoji.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 koji </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>스프링 배치(Spring Batch) - 2. 스프링 배치 도메인 이해</title><link href="https://dvlprkoji.github.io/posts/spring-batch-2/" rel="alternate" type="text/html" title="스프링 배치(Spring Batch) - 2. 스프링 배치 도메인 이해" /><published>2023-07-27T09:00:01+09:00</published> <updated>2023-07-27T09:00:01+09:00</updated> <id>https://dvlprkoji.github.io/posts/spring-batch-2/</id> <content src="https://dvlprkoji.github.io/posts/spring-batch-2/" /> <author> <name>koji</name> </author> <category term="Spring" /> <summary> 저번 포스팅에서 스프링 배치를 구성하기 위해 필요한 준비들에 대해 알아보았다. 이번 포스팅에서는 스프링 배치에서 사용하는 주요 도메인들에 대해 알아볼 것이다. Job 배치 계층 주소에서 가장 상위에 있는 개념으로 하나의 배치작업 자체를 의미한다. JobParameter Job을 실행할 때 함께 포함되어 사용되는 파라미터를 가진 객체이다. JobInstance Job 이 실행될 때 생성되는 Job 의 논리적 실행 단위 객체이다. 만약 처음 실행하는 Job + JobParameter 일 경우 새로운 JobInstance 를 생성한다. 이미 실행한 적 있는 Job + JobParameter 일 경우 기존에 생성된 JobInstance를 리턴한다 다음은 “일별 정산”을 하는 Job 에... </summary> </entry> <entry><title>스프링 배치(Spring Batch) - 1. 스프링 배치 시작</title><link href="https://dvlprkoji.github.io/posts/spring-batch/" rel="alternate" type="text/html" title="스프링 배치(Spring Batch) - 1. 스프링 배치 시작" /><published>2023-07-23T09:00:01+09:00</published> <updated>2023-07-27T21:14:07+09:00</updated> <id>https://dvlprkoji.github.io/posts/spring-batch/</id> <content src="https://dvlprkoji.github.io/posts/spring-batch/" /> <author> <name>koji</name> </author> <category term="Spring" /> <summary> 최근 업무 중 스프링 배치를 사용할 일이 있어 빠르게 사용법을 익히고 적용하게 되었다. 기존에 인프런에서 강의를 사놓은 게 있어 참고하긴 했지만 너무 빠르게 익힌 감이 있어 글로 정리해 보려 한다. 배치 애플리케이션이란? 배치(Batch)란 일괄처리 란 뜻을 가지고 있다. 만약 매일 전 날 데이터를 집계 해야한다고 가정해 보자. 이 집계 과정을 기존의 웹 어플리케이션에서 수행한다면 커다란 문제가 생길 것이다. 집계하는 과정에서 아주 커다란 데이터를 읽고, 가공하고, 저장하기 때문에 서버의 CPU, I/O 등의 자원을 다 써버려서 [기존의 웹 어플리케이션에서 수행하던 Request 처리를 하지 못하게 될 것이다. 그리고 이 집계 기능은 하루에 1번 수행된다. 이를 위해 복잡한 API를 구성하는 것은... </summary> </entry> <entry><title>예제로 알아보는 제어의 역전 - IoC(Inversion of Control)</title><link href="https://dvlprkoji.github.io/posts/ioc/" rel="alternate" type="text/html" title="예제로 알아보는 제어의 역전 - IoC(Inversion of Control)" /><published>2023-06-22T09:00:01+09:00</published> <updated>2023-06-22T09:00:01+09:00</updated> <id>https://dvlprkoji.github.io/posts/ioc/</id> <content src="https://dvlprkoji.github.io/posts/ioc/" /> <author> <name>koji</name> </author> <category term="Spring" /> <summary> 스프링 프레임워크에 대해 공부하다 보면 IoC, 제어의 역전이라는 키워드가 자주 등장한다. 스프링을 사용하는 개발자라면 숨쉬듯이 사용하고 있을 이 개념을 예제를 통해 다시 한번 정리해 보려고 한다. IoC란? 프로그램의 제어 권한을 자신이 아닌 다른 대상에게 위임하는 방식 추상적인 개념이기에 한 문장으로 표현하기가 어렵다. 따라서 폭넓게 적용되어 있는 다양한 예시를 들어 살펴보자. 1. 서블릿 일반적인 자바 프로그램은 main() 메소드에서 시작해서 개발자가 미리 정한 순서를 따라 오브젝트가 생성되고 실행된다. 그런데 서블릿을 개발해 서버에 배포할 수는 있지만, 그 실행을 개발자가 직접 제어할 수 있는 방법은 없다. 대신 서블릿에 대한 제어 권한을 가진 서블릿 컨테이너가 적절한 시점에 서... </summary> </entry> <entry><title>스프링 MVC</title><link href="https://dvlprkoji.github.io/posts/spring-mvc/" rel="alternate" type="text/html" title="스프링 MVC" /><published>2023-06-07T09:00:01+09:00</published> <updated>2023-06-07T09:00:01+09:00</updated> <id>https://dvlprkoji.github.io/posts/spring-mvc/</id> <content src="https://dvlprkoji.github.io/posts/spring-mvc/" /> <author> <name>koji</name> </author> <category term="Spring" /> <summary> 저번 포스팅에서 서블릿 컨테이너, 스프링 컨테이너의 생성 과정을 알아 보았다. 이번 포스팅에서는 MVC 아키텍쳐에서 각 컨테이너들의 생성 이후 사용자의 요청을 처리하는 과정을 알아 본다. MVC 아키텍쳐란? 프레젠테이션 계층의 구성요소를 정보를 담은 모델(M), 화면 출력 로직을 담은 뷰(V), 제어 로직을 담은 컨트롤러(C) 로 분리하고 이 세 가지 요소가 서로 협력하여 하나의 웹 요청을 처리하고 응답을 만들어내는 구조다. 일반적으로 MVC 아키텍쳐는 프론트 컨트롤러 패턴과 함께 사용된다. 프론트 컨트롤러 패턴은 중앙집중형 컨트롤러를 프레젠테이션 계층의 제일 앞에 둬서 서버로 들어오는 모든 요청을 먼저 받아 처리한다. DispatcherServlet과 MVC의 동작 과정 MVC의 각 ... </summary> </entry> <entry><title>스프링 컨테이너와 서블릿 컨테이너</title><link href="https://dvlprkoji.github.io/posts/spring-container/" rel="alternate" type="text/html" title="스프링 컨테이너와 서블릿 컨테이너" /><published>2023-06-06T09:00:01+09:00</published> <updated>2023-06-06T09:00:01+09:00</updated> <id>https://dvlprkoji.github.io/posts/spring-container/</id> <content src="https://dvlprkoji.github.io/posts/spring-container/" /> <author> <name>koji</name> </author> <category term="Spring" /> <summary> 웹 개발자라면 스프링 컨테이너와 서블릿 컨테이너에 대해 어느 정도는 알고 있을 것이다. 나도 딱 어느정도만 알고 있고, 실무에서 직접적으로 다루지는 않다 보니 공부를 해도 금세 휘발되어 버린다. 웹개발자라면 컨테이너, 스프링 컨테이너, 서블릿 컨테이너에 대해 언제나 설명할 수 있어야 한다고 생각하기에 정리해본다. 서블릿이란? 서블릿(Servlet)이란 동적 웹 페이지를 만들 때 사용되는 자바 기반의 웹 애플리케이션 프로그래밍 기술이다. 즉 정적인 웹사이트를 사용자나 요청에 따라 동적인 웹사이트로 바꿀 수 있게 도와주는 기술이다. 쉽게 예를 들면 사용자의 로그인 요청을 처리하여 사용자마다 다른 웹 페이지를 보여주는 것이 바로 서블릿이다. 서블릿 컨테이너란? 서블릿의 생성, 실행, 소... </summary> </entry> </feed>
